{{- $dockerAuthMode := or .Values.dockerConfig .Values.registryCredsSecret -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ratify.fullname" . }}
  labels:
    {{- include "ratify.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "ratify.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "ratify.selectorLabels" . | nindent 8 }}
    spec:
      {{- if or .Values.azureWorkloadIdentity.clientId .Values.serviceAccount.create .Values.serviceAccount.name }}
      serviceAccountName: {{ include "ratify.serviceAccountName" . }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          command:
            - "/app/ratify"
          args:
            - "serve"
            - "--http"
            - ":6001"
            - "-c"
            - "/usr/local/ratify/config.json"
            - "--enable-crd-manager"
            {{- if eq .Values.provider.auth "tls" }}
            - --cert-dir=/usr/local/tls
            {{- end }}
            {{- if eq .Values.provider.auth "mtls" }}
            - --cert-dir=/usr/local/tls
            - --ca-cert-file=usr/local/tls/client-ca/ca.crt
            {{- end }}
          ports:
            - containerPort: 6001
          volumeMounts:
            - mountPath: "/usr/local/ratify-certs"
              {{- if .Values.akvCertConfig.enabled }}
              name: cert-from-akv
              {{- else }}
              name: certs
              {{- end }}
              readOnly: true
            - mountPath: "/usr/local/ratify"
              name: config
              readOnly: true
              {{- if $dockerAuthMode }}
            - mountPath: "/usr/local/docker"
              name: dockerconfig
              readOnly: true
              {{- end }}
            {{- if and (.Values.provider.tls.cabundle) (or (eq .Values.provider.auth "tls") (eq .Values.provider.auth "mtls")) }}
            - mountPath: /usr/local/tls
              name: tls
              readOnly: true
            {{- if eq .Values.provider.auth "mtls" }}
            - mountPath: /usr/local/tls/client-ca
              name: client-ca-cert
              readOnly: true
            {{- end }}
            {{- end }}
          env:
          {{- if $dockerAuthMode }}
            - name: DOCKER_CONFIG
              value: "/usr/local/docker"
          {{- end }}
            - name: RATIFY_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: certs
          secret:
            secretName: {{ include "ratify.fullname" . }}-certificate
        {{- if $dockerAuthMode }}
        - name: dockerconfig
          secret:
            {{- if .Values.registryCredsSecret }}
            secretName: {{ .Values.registryCredsSecret }}
            {{- else }}
            secretName: {{ include "ratify.fullname" . }}-dockerconfig
            {{- end }}
            items:
              - key: .dockerconfigjson
                path: config.json
        {{- end }}
        {{- if .Values.akvCertConfig.enabled }}
        - name: cert-from-akv
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "{{ include "ratify.akv.secretProviderClassName" . }}"
        {{- end }}
        - name: config
          configMap:
            name: {{ include "ratify.fullname" . }}-configuration
        {{- if and (.Values.provider.tls.cabundle) (or (eq .Values.provider.auth "tls") (eq .Values.provider.auth "mtls")) }}
        - name: tls
          secret:
            {{- if and .Values.provider.tls.crt .Values.provider.tls.key }}
            secretName: {{ include "ratify.fullname" . }}-tls
            {{- else }}
            secretName: ratify-cert-secret
            {{- end }}
            items:
              - key: tls.key
                path: tls.key
              - key: tls.crt
                path: tls.crt
        {{- if eq .Values.provider.auth "mtls" }}
        - name: client-ca-cert
          secret:
            secretName: gatekeeper-webhook-server-cert
            items:
              - key: ca.crt
                path: ca.crt
        {{- end }}
        {{- end }}
